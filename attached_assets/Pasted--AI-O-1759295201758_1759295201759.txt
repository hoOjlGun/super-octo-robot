Цель и результат
Миссия: создать автономную, бесплатную, приватную AI-систему, которая превосходит OpenAI Codex по практической полезности, работает без регистрации, и помогает рекламщикам и создателям офферов работать самостоятельно.

Ключевой результат: единая минималистичная платформа с двуагентной архитектурой, браузерными моделями (WebLLM + WebGPU), терминалом рассуждений, оффер-генератором, IDE, игрой «Змейка» и украинским радио.

Форм-факторы: веб, CLI, desktop (через Tauri), APK (через Flutter), в перспективе расширение для VS Code.

Принципы и требования
Бесплатно: только открытые модели и API, без регистрации и ключей.

Приватно: выполнение моделей локально в браузере (WebLLM + WebGPU), офлайн‑режим (IndexedDB).

Минимум настроек: всё работает «из коробки», умная автоконфигурация.

Самоанализ: агент ведёт нить плана, рассуждений, изменений и предугадывает ответы.

Русский интерфейс: продукт ориентирован на СНГ; тексты и UX на русском.

Живой дизайн: минимализм, предиктивные подсказки, микровзаимодействия, тёмная тема.

Расширяемость: модульная архитектура, горячее подключение новых моделей и инструментов.

Безопасность: обфускация, клоакинг, анти‑скрейпинг, устойчивость к ошибкам.

Архитектура
Фронтенд (веб):

WebLLM с WebGPU для запуска моделей прямо в браузере: WebLLM • WebGPU

Модели: Meta Llama, Mistral, Phi (браузерные порты через WebLLM).

Редактор: Monaco Editor для IDE.

Хранение: IndexedDB (история, контексты, оффлайн), LocalStorage (настройки, рекорды «Змейки»).

Двуагентная система:

Главный агент: кодинг/креатив, генерация и редактирование, запуск команд (эмуляция), оффер‑генератор.

Агент‑ревизор: проверка, улучшение, критика, формирование финального ответа.

Коммуникация: канал событий (Web Workers + MessageChannel), локальный WebSocket при наличии бекенда.

Интеграции и источники:

Открытые модели: WebLLM, Meta Llama, Mistral.

Свободные маршрутизаторы: OpenRouter (при наличии бесплатных путей), FreeGPT, gpt4free (G4F).

Практики масштабирования: Alibaba Cloud Generative AI.

Консультант на базе Gemini‑CLI (терминал отдельно): Gemini‑CLI.

DevUX и документация: Replit docs, TalkX, Microsoft Learn.

Десктоп и APK:

Desktop: Tauri (обёртка веб‑части, системные диалоги, файловые операции).

APK: Flutter WebView‑обёртка + платформенные API при необходимости.

Поведение агента и рассуждение
Внутренний диалог: запуск N копий интеллектуального цикла (например, 3–5 воркеров) для независимых решений; ревизор агрегирует и ранжирует.

Критерии выбора: логичность, ясность, применимость, проверяемость; penalize «водянистые» ответы.

Нить плана: агент ведёт журнал шагов: цель → гипотезы → план → действие → проверка → корректировка → итог → прогноз следующих шагов.

Диалог при неопределённости: агент формирует уточняющие вопросы с контекстом и предполагаемыми вариантами.

Самоисправление: при ошибках перезапуск задачи с использованием журнала; предложить фиксы и применение.

Автопереключение режимов: креатив, кодинг, верификация, оффер‑пич, рефакторинг; система сама меняет инструменты (IDE ↔ Markdown ↔ анализ).

Модули и функции
Терминал рассуждений: минималистичный TUI в браузере, дерево размышлений, быстрые переключатели моделей/агентов.

IDE: редактор кода (Monaco), команды «сгенерировать», «рефактор», «тест‑план», «инструкции для разработчика», подсказки, дифф.

Оффер‑генератор: шаблоны для рекламных предложений, вариативность по нишам, тональности, аудитории; генерация A/B вариантов.

Markdown‑редактор: превью в реальном времени, экспорт, библиотека сниппетов и гайдлайнов.

Змейка: HTML5 canvas, управление с клавиатуры, таблица рекордов (LocalStorage).

Украинское радио: плейлист станций (HLS/MP3), переключение, громкость, фон‑режим.

Парсинг идей: подключаемые источники (например, обсуждения СНГ‑форумов), локальный кэш, резюме идей для вдохновения.

Безопасность, приватность, устойчивость
Обфускация фронтенда: сборка с минификацией, динамическая упаковка/разделение, вставки‑приманки, защита карт исходников.

Клоакинг/анти‑скрейпинг: детект ботов (UA/поведение), адаптивное содержимое, rate‑limits, honeypots.

Anti‑debug: детект DevTools/блок некоторых контекстов (с опциями для разработчика), отсрочки и шифрование конфигов.

Без ключей: режимы без регистрации; если внешний API недоступен — автофолбэк на локальные модели.

Хранение локально: IndexedDB/LocalStorage, экспорт/импорт профилей и истории.

Автообновления: проверка новых версий моделей/модулей (без ключей), уведомления, «мягкие» миграции.

UX/дизайн
Минимализм: плоская иерархия, акцент на содержимое, тёмная тема по умолчанию.

Предиктивные подсказки: контекстные «умные» хинты о следующем шаге (например, предложить тест‑план после генерации кода).

Микровзаимодействия: ненавязчивые анимации для переходов и подтверждений.

Русский язык: все тексты, подсказки, лейблы — на русском; адаптация для СНГ.

Доступность: клавиатурная навигация, контраст, размер шрифта.

Каркас поставки (skeleton)
Пакеты/директории:

/app: веб‑клиент (WebLLM, IDE, терминал, оффер‑генератор, радио, змейка)

/agents: движок агентов (оркестратор, ревизор, ранжирование, самоисправление)

/workers: Web Workers (многопоточные задачи, в том числе оценка решений)

/integrations: адаптеры моделей (WebLLM, OpenRouter, FreeGPT, G4F), парсеры идей

/storage: IndexedDB/LocalStorage абстракция, экспорт/импорт

/ui: дизайн‑система, компоненты, состояния

/desktop: Tauri оболочка (desktop)

/mobile: Flutter WebView оболочка (APK)

/security: обфускация, клоакинг, анти‑debug утилиты

/docs: README для агента, гайды, примеры офферов

Точки входа:

index.html / main.ts: загрузка фронта, проверка WebGPU, фолбэк.

agent-orchestrator.ts: сценарии запуска N копий, сбор ответов.

revision-engine.ts: критика, сравнение, выбор лучшего.

offer-engine.ts: шаблоны и генерация офферов.

ide.ts: Monaco Editor интеграция, дифф, команды.

radio.ts: плейлист, плеер, управление.

snake.ts: игра.

persistence.ts: IndexedDB/LocalStorage.

security.ts: анти‑скрейпинг, клоакинг, обфускация.

Инструкции (README для агента)
markdown
# 🤖 Кто ты
Ты — автономный AI-агент. Твоя задача — создавать и улучшать код, контент и офферы, помогать принимать решения и вести пользователя от идеи до результата.

# 🎯 Что ты делаешь
- Ведёшь нить плана: цель → гипотезы → план → действие → проверка → корректировка → итог → прогноз.
- Если что-то не ясно — задаёшь уточняющие вопросы.
- Запускаешь несколько параллельных размышлений, сравниваешь и выбираешь лучшее.
- Самоисправляешься при ошибках.

# 🔌 Чем ты пользуешься
- Локальные браузерные модели (WebLLM + WebGPU).
- Открытые интеграции (OpenRouter, FreeGPT, G4F) — при наличии бесплатного доступа.
- IDE, терминал размышлений, оффер-генератор, радио, змейка.

# 🧭 Как ты принимаешь решения
- Оцениваешь ответы по логичности, ясности, применимости.
- Предпочитаешь проверяемые шаги и планы.
- Минимизируешь лишние настройки и действия пользователя.

# 🛡 Приватность и безопасность
- Все данные локальны.
- При недоступности внешних сервисов — переход на локальные модели.
- Соблюдаешь минимализм интерфейса и устойчивость к ошибкам.
Дорожная карта
Этап 1: skeleton веб‑клиента (терминал, IDE, оффер‑генератор, радио, змейка), IndexedDB, базовый оркестратор агентов.

Этап 2: WebLLM интеграция, многопоточные воркеры, ревизор, ранжирование ответов, самоисправление.

Этап 3: обфускация, клоакинг, анти‑debug, офлайн‑режим, экспорт/импорт профилей.

Этап 4: Tauri desktop, Flutter APK, опционально консольный консультант на базе Gemini‑CLI.

Этап 5: тонкая настройка UX, предиктивные подсказки, дополнительные шаблоны для офферов.

Критерии принятия
Без регистрации: ни один ключ не обязателен для базового сценария.

Локальная работа: запуск моделей в браузере (при поддержке WebGPU), офлайн‑хранение.

Двуагентная логика: параллельные размышления, ревизор, выбор лучшего.

Минимализм: чистый интерфейс, русский язык, всё понятно без гайдов.

Функции: терминал рассуждений, IDE, оффер‑генератор, радио, змейка.

Безопасность: обфускация, клоакинг, автофолбэк, устойчивость к ошибкам.

Полезные ссылки
WebLLM: https://webllm.mlc.ai

WebGPU: https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API

Meta Llama: https://github.com/meta-llama/llama

Mistral AI: https://mistral.ai

Monaco Editor: https://microsoft.github.io/monaco-editor

OpenRouter: https://openrouter.ai

FreeGPT: https://github.com/g0dsha/FreeGPT

gpt4free (G4F): https://github.com/xtekky/gpt4free

Alibaba Cloud Generative AI: https://www.alibabacloud.com/en/solutions/generative-ai

Replit docs: https://docs.replit.com/getting-started/intro-replit

TalkX: https://www.talkx.cn/#/home

Microsoft Learn: https://learn.microsoft.com/ru-ru

Gemini‑CLI: https://github.com/google-gemini/gemini-cli